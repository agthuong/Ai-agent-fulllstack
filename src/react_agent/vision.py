import os
import google.generativeai as genai
from PIL import Image
import io
from dotenv import load_dotenv
import logging

# Set up basic logging to see the output in the console
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Load environment variables from .env file
load_dotenv()

# Configure the Gemini API key
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    raise ValueError("GOOGLE_API_KEY not found in .env file. Please add it.")

genai.configure(api_key=api_key)

# Initialize the Gemini Pro Vision model
vision_model = genai.GenerativeModel('gemini-2.5-flash')

def get_gemini_vision_report(image_bytes: bytes, prompt: str) -> str:
    """
    Analyzes an image using the Gemini Pro Vision model and returns a textual report.

    This function takes image data in bytes and a text prompt, sends them to the
    Gemini API, and returns the generated text description.

    Args:
        image_bytes: The image data as a byte string.
        prompt: The text prompt to guide the analysis (e.g., "Describe this image in detail.").

    Returns:
        A string containing the report generated by the vision model.
        
    Raises:
        Exception: If the API call to Gemini fails.
    """
    try:
        logging.info("Preparing to call Gemini Vision API.")
        # Convert image bytes to a PIL Image object
        image = Image.open(io.BytesIO(image_bytes))
        
        # Prepare the content for the API call
        # The API expects a list of parts, where parts can be text or images.
        content = [prompt, image]
        
        logging.info(f"Sending prompt to Gemini: '{prompt[:150]}...'")
        
        # Call the Gemini API
        response = vision_model.generate_content(content)
        
        # Log the raw response for debugging
        logging.info("Received a successful response from Gemini.")
        logging.debug(f"Full Gemini response: {response.text}")
        
        # Return the generated text
        return response.text
    except Exception as e:
        # Log the full exception to the console
        logging.error(f"Error calling Gemini Vision API: {e}", exc_info=True)
        # Re-raise the exception so it can be caught by the Flask app and shown in the UI
        raise

# Example usage (for testing purposes)
if __name__ == '__main__':
    # This part will only run when the script is executed directly
    try:
        # Load a sample image (replace with a path to your test image)
        with open("room_images.jpg", "rb") as f:
            sample_image_bytes = f.read()
        
        sample_prompt = "Describe this image and suggest a question a user might ask about it."
        
        report = get_gemini_vision_report(sample_image_bytes, sample_prompt)
        
        print("--- Gemini Vision Report ---")
        print(report)
        
    except FileNotFoundError:
        print("Test image not found. Please update the path in the `if __name__ == '__main__':` block.")
    except Exception as e:
        print(f"An error occurred during the test run: {e}") 